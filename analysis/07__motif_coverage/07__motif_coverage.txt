
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import time

from itertools import chain
from decimal import Decimal
from random import shuffle
from scipy import stats
from scipy import signal
from scipy.spatial import distance
from scipy.cluster import hierarchy
from statsmodels.sandbox.stats import multicomp

# import utils
sys.path.append("../../utils")
from plotting_utils import *
from misc_utils import *
from norm_utils import *

%matplotlib inline

sns.set(**PAPER_PRESET)
fontsize = PAPER_FONTSIZE

mosbat_file = "../../misc/02__mosbat/results.from_mosbat.txt"

all_tss_f = "../../data/00__index/0__all_tss/All.TSS.114bp.bed"
motif_cov_f = "../../misc/03__fimo/All.TSS.114bp.Motifs.txt"
motif_max_f = "../../misc/03__fimo/All.TSS.114bp.maxonly.txt"
chip_cov_f = "../../misc/03__fimo/All.TSS.114bp.Motifs.Intersect.Chip.ALL.txt"
cluster_cov_f = "../../misc/03__fimo/All.TSS.114bp.Cluster.ALL.txt"
cage_expr_f = "../../misc/other_files/All_TSS_and_enh.CAGE_grouped_exp.tissue_sp.txt"

corr = pd.read_table(mosbat_file, sep="\t")

all_tss = pd.read_table(all_tss_f, sep="\t", header=None)
all_tss.columns = ["chr", "start", "end", "seqID", "score", "strand"]
all_tss = all_tss.drop_duplicates()
print(len(all_tss))
print(len(all_tss["seqID"].unique()))
all_tss.head()

motif_cov = pd.read_table(motif_cov_f, sep="\t")
motif_cov = motif_cov.drop_duplicates()
motif_max = pd.read_table(motif_max_f, sep="\t", header=None)
motif_max = motif_max.drop_duplicates()
motif_max.columns = ["seqID", "MaxCov"]

# merge w/ All_TSS to get 0s
motif_cov = all_tss[["seqID"]].merge(motif_cov, on="seqID", how="left")
motif_cov = motif_cov.merge(motif_max, on="seqID", how="left")
motif_cov.fillna(0, inplace=True)
print(len(motif_cov))

# get promtype2
motif_cov["PromType2"] = motif_cov.seqID.str.split("__", expand=True)[0]

motif_cov.sample(5)

chip_cov = pd.read_table(chip_cov_f, sep="\t")
chip_cov = chip_cov.drop_duplicates()

# merge w/ All_TSS to get 0s
chip_cov = all_tss[["seqID"]].merge(chip_cov, on="seqID", how="left")
chip_cov.fillna(0, inplace=True)
print(len(chip_cov))

# get promtype2
chip_cov["PromType2"] = chip_cov.seqID.str.split("__", expand=True)[0]

chip_cov.sample(5)

cluster_cov = pd.read_table(cluster_cov_f, sep="\t")
cluster_cov = cluster_cov.drop_duplicates()

# merge w/ All_TSS to get 0s
cluster_cov = all_tss[["seqID"]].merge(cluster_cov, on="seqID", how="left")
cluster_cov.fillna(0, inplace=True)
print(len(cluster_cov))

# get promtype2
cluster_cov["PromType2"] = cluster_cov.seqID.str.split("__", expand=True)[0]

cluster_cov.sample(5)

# filter to those that have at least 1 motif so distributions are not 0-skewed
motif_cov = motif_cov[motif_cov["numMotifs"] > 0]
print(len(motif_cov))

chip_cov = chip_cov[chip_cov["numMotifs"] > 0]
print(len(chip_cov))

cluster_cov = cluster_cov[cluster_cov["numMotifs"] > 0]
print(len(cluster_cov))

cage_expr = pd.read_table(cage_expr_f, sep="\t")
cage_expr.head()

def get_cage_id(row):
    split = row.seqID.split("__")
    if len(split) == 2:
        return split[1]
    else:
        return split[2]

motif_cov["cage_id"] = motif_cov.apply(get_cage_id, axis=1)
motif_cov = motif_cov.merge(cage_expr, on="cage_id", how="left")
motif_cov.head()

chip_cov["cage_id"] = chip_cov.apply(get_cage_id, axis=1)
chip_cov = chip_cov.merge(cage_expr, on="cage_id", how="left")
chip_cov.sample(10)

cluster_cov["cage_id"] = cluster_cov.apply(get_cage_id, axis=1)
cluster_cov = cluster_cov.merge(cage_expr, on="cage_id", how="left")
cluster_cov.head()

chip_cov_exp = chip_cov[~pd.isnull(chip_cov["av_exp"])]
motif_cov_exp = motif_cov[~pd.isnull(motif_cov["av_exp"])]
cluster_cov_exp = motif_cov[~pd.isnull(cluster_cov["av_exp"])]

chip_cov_exp.PromType2.value_counts()

motif_cov_exp.PromType2.value_counts()

cluster_cov_exp.PromType2.value_counts()

motif_cov["log_bp_covered"] = np.log(motif_cov["numBPcovered"]+1)
motif_cov["log_max_cov"] = np.log(motif_cov["MaxCov"]+1)

motif_cov_exp["log_bp_covered"] = np.log(motif_cov_exp["numBPcovered"]+1)
motif_cov_exp["log_max_cov"] = np.log(motif_cov_exp["MaxCov"]+1)

enh_vals = motif_cov[motif_cov["PromType2"] == "Enhancer"]["log_bp_covered"]
linc_vals = motif_cov[motif_cov["PromType2"] == "intergenic"]["log_bp_covered"]
dlnc_vals = motif_cov[motif_cov["PromType2"] == "div_lnc"]["log_bp_covered"]
pc_vals = motif_cov[motif_cov["PromType2"] == "protein_coding"]["log_bp_covered"]
dpc_vals = motif_cov[motif_cov["PromType2"] == "div_pc"]["log_bp_covered"]

fig = plt.figure(figsize=(2.75, 2))
ax = sns.kdeplot(data=enh_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["Enhancer"], 
                 label="eRNAs (n=%s)" % len(enh_vals))
sns.kdeplot(data=linc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["intergenic"], 
            label="lincRNAs (n=%s)" % len(linc_vals), ax=ax)
sns.kdeplot(data=dlnc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_lnc"], 
            label="div. lncRNAs (n=%s)" % len(dlnc_vals), ax=ax)
sns.kdeplot(data=pc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs (n=%s)" % len(pc_vals), ax=ax)
sns.kdeplot(data=dpc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_pc"], 
            label="div. mRNAs (n=%s)" % len(dpc_vals), ax=ax)
ax.set_xlabel("log(# of bp covered)")
ax.set_ylabel("cumulative density")
ax.set_xlim((2, 5))

# for each group, split into tissue-sp v dynamic v ubiquitous
idxs = list(range(0, 5))
promtypes = ["Enhancer", "intergenic", "protein_coding"]
names = ["eRNAs", "lincRNAs", "mRNAs"]
df = motif_cov_exp
col = "log_bp_covered"
xlabel = "log(# of bp covered)"
xlim = (2, 5)

f, axarr = plt.subplots(nrows=1, ncols=3, sharex=False, sharey=True, figsize=(7, 2))

for i, promtype, name in zip(idxs, promtypes, names):
    print("i: %s, promtype: %s, name: %s" % (i, promtype, name))
    ax = axarr[i]
    
    promtype_vals = df[df["PromType2"] == promtype]
    ts_vals = promtype_vals[promtype_vals["tss_type"] == "tissue-specific"][col]
    ub_vals = promtype_vals[promtype_vals["tss_type"] == "ubiquitous"][col]
    dy_vals = promtype_vals[promtype_vals["tss_type"] == "dynamic"][col]
    
    sns.kdeplot(data=ts_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dashed",
                label="tissue-specific\n(n=%s)" % len(ts_vals), ax=ax)
    sns.kdeplot(data=ub_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="solid",
                label="ubiquitous\n(n=%s)" % len(ub_vals), ax=ax)
    sns.kdeplot(data=dy_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dotted",
                label="dynamic\n(n=%s)" % len(dy_vals), ax=ax)
    
    ax.set_title("%s (%s total)" % (name, len(promtype_vals)))
    ax.set_xlabel(xlabel)
    ax.legend(loc="upper left")
    ax.set_xlim(xlim)
    
    if i == 0:
        ax.set_ylabel("cumulative density")

fig = plt.figure(figsize=(2.4, 1.2))
ax = sns.kdeplot(data=linc_vals, cumulative=False, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs", shade=True)
sns.kdeplot(data=pc_vals, cumulative=False, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax, shade=True)
ax.set_xlabel("log(# of bp covered)")
ax.set_ylabel("density")
ax.set_xlim((2, 5.5))
ax.set_ylim((0, 2))
fig.savefig("num_bp_cov.kde.for_talk.pdf", dpi="figure", bbox_inches="tight")

fig = plt.figure(figsize=(2, 1.7))
ax = sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs")
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
ax.set_xlabel("log(# of bp covered)")
ax.set_ylabel("cumulative density")
ax.set_xlim((2, 5))
ax.set_ylim((0, 1.02))
fig.savefig("num_bp_cov.cdf.for_talk.pdf", dpi="figure", bbox_inches="tight")

enh_vals = motif_cov[motif_cov["PromType2"] == "Enhancer"]["log_max_cov"]
linc_vals = motif_cov[motif_cov["PromType2"] == "intergenic"]["log_max_cov"]
dlnc_vals = motif_cov[motif_cov["PromType2"] == "div_lnc"]["log_max_cov"]
pc_vals = motif_cov[motif_cov["PromType2"] == "protein_coding"]["log_max_cov"]
dpc_vals = motif_cov[motif_cov["PromType2"] == "div_pc"]["log_max_cov"]

fig = plt.figure(figsize=(2.75, 2))
ax = sns.kdeplot(data=enh_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["Enhancer"], 
                 label="eRNAs")
sns.kdeplot(data=linc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["intergenic"], 
            label="lincRNAs", ax=ax)
sns.kdeplot(data=dlnc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_lnc"], 
            label="div. lncRNAs", ax=ax)
sns.kdeplot(data=pc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
sns.kdeplot(data=dpc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_pc"], 
            label="div. mRNAs", ax=ax)
ax.set_xlabel("log(max coverage)")
ax.set_ylabel("cumulative density")
fig.savefig("max_cov.all_biotypes.for_poster.pdf", dpi="figure", bbox_inches="tight")

# for each group, split into tissue-sp v dynamic v ubiquitous
idxs = list(range(0, 5))
promtypes = ["Enhancer", "intergenic", "protein_coding"]
names = ["eRNAs", "lincRNAs", "mRNAs"]
df = motif_cov_exp
col = "log_max_cov"
xlabel = "log(max coverage)"
xlim = (0, 5.5)

f, axarr = plt.subplots(nrows=1, ncols=3, sharex=False, sharey=True, figsize=(7, 2))

for i, promtype, name in zip(idxs, promtypes, names):
    print("i: %s, promtype: %s, name: %s" % (i, promtype, name))
    ax = axarr[i]
    
    promtype_vals = df[df["PromType2"] == promtype]
    ts_vals = promtype_vals[promtype_vals["tss_type"] == "tissue-specific"][col]
    ub_vals = promtype_vals[promtype_vals["tss_type"] == "ubiquitous"][col]
    dy_vals = promtype_vals[promtype_vals["tss_type"] == "dynamic"][col]
    
    sns.kdeplot(data=ts_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dashed",
                label="tissue-specific\n(n=%s)" % len(ts_vals), ax=ax)
    sns.kdeplot(data=ub_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="solid",
                label="ubiquitous\n(n=%s)" % len(ub_vals), ax=ax)
    sns.kdeplot(data=dy_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dotted",
                label="dynamic\n(n=%s)" % len(dy_vals), ax=ax)
    
    ax.set_title("%s (%s total)" % (name, len(promtype_vals)))
    ax.set_xlabel(xlabel)
    ax.legend(loc="bottom right")
    ax.set_xlim(xlim)
    
    if i == 0:
        ax.set_ylabel("cumulative density")

fig = plt.figure(figsize=(2.4, 1.2))
ax = sns.kdeplot(data=linc_vals, cumulative=False, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs", shade=True)
sns.kdeplot(data=pc_vals, cumulative=False, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax, shade=True)
ax.set_xlabel("log(max # overlapping motifs)")
ax.set_ylabel("density")
ax.set_ylim((0, 0.7))
fig.savefig("max_cov.kde.for_talk.pdf", dpi="figure", bbox_inches="tight")

fig = plt.figure(figsize=(2, 1.7))
ax = sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs")
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
ax.set_xlabel("log(max # overlapping motifs)")
ax.set_ylabel("cumulative density")
ax.set_xlim((0.2, 4.8))
ax.set_ylim((0, 1.02))
plt.legend(loc=2)
fig.savefig("max_cov.cdf.for_talk.pdf", dpi="figure", bbox_inches="tight")

chip_cov["log_bp_covered"] = np.log(chip_cov["numBPcovered"]+1)
chip_cov["log_max_cov"] = np.log(chip_cov["MaxCov"]+1)

chip_cov_exp["log_bp_covered"] = np.log(chip_cov_exp["numBPcovered"]+1)
chip_cov_exp["log_max_cov"] = np.log(chip_cov_exp["MaxCov"]+1)

enh_vals = chip_cov[chip_cov["PromType2"] == "Enhancer"]["log_bp_covered"]
linc_vals = chip_cov[chip_cov["PromType2"] == "intergenic"]["log_bp_covered"]
dlnc_vals = chip_cov[chip_cov["PromType2"] == "div_lnc"]["log_bp_covered"]
pc_vals = chip_cov[chip_cov["PromType2"] == "protein_coding"]["log_bp_covered"]
dpc_vals = chip_cov[chip_cov["PromType2"] == "div_pc"]["log_bp_covered"]

fig = plt.figure(figsize=(2.75, 2))
ax = sns.kdeplot(data=enh_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["Enhancer"], 
                 label="eRNAs")
sns.kdeplot(data=linc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["intergenic"], 
            label="lincRNAs", ax=ax)
sns.kdeplot(data=dlnc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_lnc"], 
            label="div. lncRNAs", ax=ax)
sns.kdeplot(data=pc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
sns.kdeplot(data=dpc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_pc"], 
            label="div. mRNAs", ax=ax)
ax.set_xlabel("log(# of bp covered)")
ax.set_ylabel("cumulative density")
fig.savefig("Fig_2D.pdf", bbox_inches="tight", dpi="figure")

# for each group, split into tissue-sp v dynamic v ubiquitous
idxs = list(range(0, 5))
promtypes = ["Enhancer", "intergenic", "protein_coding"]
names = ["eRNAs", "lincRNAs", "mRNAs"]
df = chip_cov_exp
col = "log_bp_covered"
xlabel = "log(# of bp covered)"
xlim = (-1, 6)

f, axarr = plt.subplots(nrows=1, ncols=3, sharex=False, sharey=True, figsize=(7.2, 2))

for i, promtype, name in zip(idxs, promtypes, names):
    print("i: %s, promtype: %s, name: %s" % (i, promtype, name))
    ax = axarr[i]
    
    promtype_vals = df[df["PromType2"] == promtype]
    ts_vals = promtype_vals[promtype_vals["tss_type"] == "tissue-specific"][col]
    ub_vals = promtype_vals[promtype_vals["tss_type"] == "ubiquitous"][col]
    dy_vals = promtype_vals[promtype_vals["tss_type"] == "dynamic"][col]
    
    sns.kdeplot(data=ts_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dashed",
                label="tissue-sp.\n(n=%s)" % len(ts_vals), ax=ax)
    sns.kdeplot(data=ub_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="solid",
                label="ubiq.\n(n=%s)" % len(ub_vals), ax=ax)
    sns.kdeplot(data=dy_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dotted",
                label="dynamic\n(n=%s)" % len(dy_vals), ax=ax)
    
    ax.set_title("%s (%s total)" % (name, len(promtype_vals)))
    ax.set_xlabel(xlabel)
    ax.legend(loc="bottom right")
    ax.set_xlim(xlim)
    
    if i == 0:
        ax.set_ylabel("cumulative density")

enh_vals = chip_cov[chip_cov["PromType2"] == "Enhancer"]["log_max_cov"]
linc_vals = chip_cov[chip_cov["PromType2"] == "intergenic"]["log_max_cov"]
dlnc_vals = chip_cov[chip_cov["PromType2"] == "div_lnc"]["log_max_cov"]
pc_vals = chip_cov[chip_cov["PromType2"] == "protein_coding"]["log_max_cov"]
dpc_vals = chip_cov[chip_cov["PromType2"] == "div_pc"]["log_max_cov"]

fig = plt.figure(figsize=(2.5, 2))
ax = sns.kdeplot(data=enh_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["Enhancer"], 
                 label="eRNAs")
sns.kdeplot(data=linc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["intergenic"], 
            label="lincRNAs", ax=ax)
sns.kdeplot(data=dlnc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_lnc"], 
            label="div. lncRNAs", ax=ax)
sns.kdeplot(data=pc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
sns.kdeplot(data=dpc_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE["div_pc"], 
            label="div. mRNAs", ax=ax)
ax.set_xlabel("log(max coverage)")
ax.set_ylabel("cumulative density")
fig.savefig("Fig_2E.pdf", bbox_inches="tight", dpi="figure")

# for each group, split into tissue-sp v dynamic v ubiquitous
idxs = list(range(0, 5))
promtypes = ["Enhancer", "intergenic", "protein_coding"]
names = ["eRNAs", "lincRNAs", "mRNAs"]
df = chip_cov_exp
col = "log_max_cov"
xlabel = "log(max coverage)"
xlim = (-0.5, 3)

f, axarr = plt.subplots(nrows=1, ncols=3, sharex=False, sharey=True, figsize=(7.2, 2))

for i, promtype, name in zip(idxs, promtypes, names):
    print("i: %s, promtype: %s, name: %s" % (i, promtype, name))
    ax = axarr[i]
    
    promtype_vals = df[df["PromType2"] == promtype]
    ts_vals = promtype_vals[promtype_vals["tss_type"] == "tissue-specific"][col]
    ub_vals = promtype_vals[promtype_vals["tss_type"] == "ubiquitous"][col]
    dy_vals = promtype_vals[promtype_vals["tss_type"] == "dynamic"][col]
    
    sns.kdeplot(data=ts_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dashed",
                label="tissue-sp.\n(n=%s)" % len(ts_vals), ax=ax)
    sns.kdeplot(data=ub_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="solid",
                label="ubiq.\n(n=%s)" % len(ub_vals), ax=ax)
    sns.kdeplot(data=dy_vals, cumulative=True, bw=0.1, color=TSS_CLASS_PALETTE[promtype], linestyle="dotted",
                label="dynamic\n(n=%s)" % len(dy_vals), ax=ax)
    
    ax.set_title("%s (%s total)" % (name, len(promtype_vals)))
    ax.set_xlabel(xlabel)
    ax.legend(loc="bottom right")
    ax.set_xlim(xlim)
    
    if i == 0:
        ax.set_ylabel("cumulative density")

fig = plt.figure(figsize=(2.4, 1.2))
ax = sns.kdeplot(data=linc_vals, cumulative=False, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs", shade=True)
sns.kdeplot(data=pc_vals, cumulative=False, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax, shade=True)
ax.set_xlabel("log(max # overlapping motifs)")
ax.set_ylabel("density")
#ax.set_ylim((0, 0.7))
fig.savefig("max_cov_chip.kde.for_talk.pdf", dpi="figure", bbox_inches="tight")

fig = plt.figure(figsize=(2, 1.7))
ax = sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs")
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
ax.set_xlabel("log(max # overlapping motifs)")
ax.set_ylabel("cumulative density")
#ax.set_xlim((0.2, 4.8))
#ax.set_ylim((0, 1.02))
plt.legend(loc=4)
fig.savefig("max_cov_chip.cdf.for_talk.pdf", dpi="figure", bbox_inches="tight")

corr.set_index(corr["Motif"], inplace=True)
corr.drop("Motif", axis=1, inplace=True)
corr.head()

row_linkage = hierarchy.linkage(distance.pdist(corr, 'correlation'), method="average")
col_linkage = hierarchy.linkage(distance.pdist(corr.T, 'correlation'), method="average")

dists = plot_dendrogram(row_linkage, 0.4, "correlation")

clusters = hierarchy.fcluster(row_linkage, 0.1, criterion="distance")

print("n clusters: %s" % np.max(clusters))

cluster_map = pd.DataFrame.from_dict(dict(zip(list(corr.index), clusters)), orient="index")
cluster_map.columns = ["cluster"]
cluster_map.head()

colors = sns.husl_palette(np.max(clusters), s=0.75)
shuffle(colors)
lut = dict(zip(range(np.min(clusters), np.max(clusters)+1), colors))
row_colors = cluster_map["cluster"].map(lut)

cmap = sns.cubehelix_palette(8, start=.5, light=1, dark=0.25, hue=0.9, rot=-0.75, as_cmap=True)

cg = sns.clustermap(corr, method="average", row_linkage=row_linkage, robust=True,
                    col_linkage=col_linkage, cmap=cmap, figsize=(5, 5), row_colors=row_colors,
                    linewidths=0, rasterized=True)
cg.savefig("Fig_S7A.pdf", bbox_inches="tight", dpi="figure")

cluster_cov["log_bp_covered"] = np.log(cluster_cov["numBPcovered"]+1)
cluster_cov["log_max_cov"] = np.log(cluster_cov["MaxCov"]+1)

cluster_cov_exp["log_bp_covered"] = np.log(cluster_cov_exp["numBPcovered"]+1)
cluster_cov_exp["log_max_cov"] = np.log(cluster_cov_exp["MaxCov"]+1)

enh_vals = cluster_cov[cluster_cov["PromType2"] == "Enhancer"]["log_bp_covered"]
linc_vals = cluster_cov[cluster_cov["PromType2"] == "intergenic"]["log_bp_covered"]
dlnc_vals = cluster_cov[cluster_cov["PromType2"] == "div_lnc"]["log_bp_covered"]
pc_vals = cluster_cov[cluster_cov["PromType2"] == "protein_coding"]["log_bp_covered"]
dpc_vals = cluster_cov[cluster_cov["PromType2"] == "div_pc"]["log_bp_covered"]

fig = plt.figure(figsize=(2.75, 2))
ax = sns.kdeplot(data=enh_vals, cumulative=True, color=TSS_CLASS_PALETTE["Enhancer"], 
                 label="eRNAs")
sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
            label="lincRNAs", ax=ax)
sns.kdeplot(data=dlnc_vals, cumulative=True, color=TSS_CLASS_PALETTE["div_lnc"], 
            label="div. lncRNAs", ax=ax)
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
sns.kdeplot(data=dpc_vals, cumulative=True, color=TSS_CLASS_PALETTE["div_pc"], 
            label="div. mRNAs", ax=ax)
ax.set_xlabel("log(# of bp covered, deduped by motif cluster)")
ax.set_ylabel("cumulative density")
plt.xlim((2.5,5))
fig.savefig("Fig_S7B.pdf", bbox_inches="tight", dpi="figure")

# for each group, split into tissue-sp v dynamic v ubiquitous
idxs = list(range(0, 5))
promtypes = ["Enhancer", "intergenic", "protein_coding"]
names = ["eRNAs", "lincRNAs", "mRNAs"]
df = cluster_cov_exp
col = "log_bp_covered"
xlabel = "log(# of bp covered)"
xlim = (-1, 6)

f, axarr = plt.subplots(nrows=1, ncols=3, sharex=False, sharey=True, figsize=(7.2, 2))

for i, promtype, name in zip(idxs, promtypes, names):
    print("i: %s, promtype: %s, name: %s" % (i, promtype, name))
    ax = axarr[i]
    
    promtype_vals = df[df["PromType2"] == promtype]
    ts_vals = promtype_vals[promtype_vals["tss_type"] == "tissue-specific"][col]
    ub_vals = promtype_vals[promtype_vals["tss_type"] == "ubiquitous"][col]
    dy_vals = promtype_vals[promtype_vals["tss_type"] == "dynamic"][col]
    
    sns.kdeplot(data=ts_vals, cumulative=True, color=TSS_CLASS_PALETTE[promtype], linestyle="dashed",
                label="tissue-sp.\n(n=%s)" % len(ts_vals), ax=ax)
    sns.kdeplot(data=ub_vals, cumulative=True, color=TSS_CLASS_PALETTE[promtype], linestyle="solid",
                label="ubiq.\n(n=%s)" % len(ub_vals), ax=ax)
    sns.kdeplot(data=dy_vals, cumulative=True, color=TSS_CLASS_PALETTE[promtype], linestyle="dotted",
                label="dynamic\n(n=%s)" % len(dy_vals), ax=ax)
    
    ax.set_title("%s (%s total)" % (name, len(promtype_vals)))
    ax.set_xlabel(xlabel)
    ax.legend(loc="bottom right")
    ax.set_xlim(xlim)
    
    if i == 0:
        ax.set_ylabel("cumulative density")

fig = plt.figure(figsize=(2.4, 1.2))
ax = sns.kdeplot(data=linc_vals, cumulative=False, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs", shade=True)
sns.kdeplot(data=pc_vals, cumulative=False, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax, shade=True)
ax.set_xlabel("log(# of bp covered)")
ax.set_ylabel("density")
ax.set_xlim((2, 5.1))
ax.set_ylim((0, 1.5))
fig.savefig("num_bp_cov_cluster.kde.for_talk.pdf", dpi="figure", bbox_inches="tight")

fig = plt.figure(figsize=(2, 1.7))
ax = sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs")
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
ax.set_xlabel("log(# of bp covered)")
ax.set_ylabel("cumulative density")
ax.set_xlim((2.5, 5))
ax.set_ylim((0, 1.02))
fig.savefig("num_bp_cov_cluster.cdf.for_talk.pdf", dpi="figure", bbox_inches="tight")

enh_vals = cluster_cov[cluster_cov["PromType2"] == "Enhancer"]["log_max_cov"]
linc_vals = cluster_cov[cluster_cov["PromType2"] == "intergenic"]["log_max_cov"]
dlnc_vals = cluster_cov[cluster_cov["PromType2"] == "div_lnc"]["log_max_cov"]
pc_vals = cluster_cov[cluster_cov["PromType2"] == "protein_coding"]["log_max_cov"]
dpc_vals = cluster_cov[cluster_cov["PromType2"] == "div_pc"]["log_max_cov"]

fig = plt.figure(figsize=(2.75, 2))
ax = sns.kdeplot(data=enh_vals, cumulative=True, color=TSS_CLASS_PALETTE["Enhancer"], 
                 label="eRNAs")
sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
            label="lincRNAs", ax=ax)
sns.kdeplot(data=dlnc_vals, cumulative=True, color=TSS_CLASS_PALETTE["div_lnc"], 
            label="div. lncRNAs", ax=ax)
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
sns.kdeplot(data=dpc_vals, cumulative=True, color=TSS_CLASS_PALETTE["div_pc"], 
            label="div. mRNAs", ax=ax)
ax.set_xlabel("log(max coverage, deduped by motif cluster)")
ax.set_ylabel("cumulative density")
plt.xlim((0, 2.75))
fig.savefig("Fig_S7C.pdf", bbox_inches="tight", dpi="figure")

fig = plt.figure(figsize=(2.4, 1.2))
ax = sns.kdeplot(data=linc_vals, cumulative=False, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs", shade=True)
sns.kdeplot(data=pc_vals, cumulative=False, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax, shade=True)
ax.set_xlabel("log(max # overlapping motifs)")
ax.set_ylabel("density")
#ax.set_ylim((0, 0.7))
fig.savefig("max_cov_cluster.kde.for_talk.pdf", dpi="figure", bbox_inches="tight")

fig = plt.figure(figsize=(2, 1.7))
ax = sns.kdeplot(data=linc_vals, cumulative=True, color=TSS_CLASS_PALETTE["intergenic"], 
                 label="lincRNAs")
sns.kdeplot(data=pc_vals, cumulative=True, color=TSS_CLASS_PALETTE["protein_coding"], 
            label="mRNAs", ax=ax)
ax.set_xlabel("log(max # overlapping motifs)")
ax.set_ylabel("cumulative density")
ax.set_xlim((0, 2.75))
#ax.set_ylim((0, 1.02))
plt.legend(loc=2)
fig.savefig("max_cov_cluster.cdf.for_talk.pdf", dpi="figure", bbox_inches="tight")


