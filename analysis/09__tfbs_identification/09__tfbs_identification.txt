
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import time

from os import walk
from scipy.stats import spearmanr

# import utils
sys.path.append("../../utils")
from plotting_utils import *
from misc_utils import *
from norm_utils import *
from del_utils import *

%matplotlib inline

sns.set(**PAPER_PRESET)
fontsize = PAPER_FONTSIZE

del_dir = "../../data/05__deletions"

# file w/ tfs and their expression
tf_expr_f = "../../misc/03__rna_seq_expr/tf_tissue_sp.txt"

fimo_f = "../../misc/05__fimo/pool2.fimo.txt"

index_f = "../../data/00__index/dels_oligo_pool.index.txt"

peak_signal_cutoff = 0.5
peak_length_cutoff = 5
del_buffer = 11

# hepg2
hepg2_files = []
for (dirpath, dirnames, filenames) in walk("%s/HepG2" % del_dir):
    hepg2_files.extend(filenames)
    break

# k562
k562_files = []
for (dirpath, dirnames, filenames) in walk("%s/K562" % del_dir):
    k562_files.extend(filenames)
    break

hepg2_data = {}
k562_data = {}
for files, data, cell in zip([hepg2_files, k562_files], [hepg2_data, k562_data], ["HepG2", "K562"]):
    data_dir = "%s/%s" % (del_dir, cell)
    for f in files:
        df = pd.read_table("%s/%s" % (data_dir, f))
        data[f] = df

# import tf expr data
tf_expr = pd.read_table(tf_expr_f, sep="\t")
tf_expr.head()

fimo = pd.read_table(fimo_f, sep="\t")
fimo.columns = ["motif", "unique_id", "start", "stop", "strand", "score", "p-value", "q-value", "seq"]
fimo.head()

# filter to tfs that are expr in the 2 cell lines
hepg2_tfs = tf_expr[tf_expr["HepG2"] > 1]["motif_name"]
k562_tfs = tf_expr[tf_expr["K562"] > 1]["motif_name"]

index = pd.read_table(index_f, sep="\t")
index_elem = index[["unique_id", "tile_name", "chr", "tile_start", "tile_end", "strand", "tile_number"]].drop_duplicates()
index_elem.head()

hepg2_data_filt = {}
k562_data_filt = {}
for data, data_filt in zip([hepg2_data, k562_data], [hepg2_data_filt, k562_data_filt]):
    for key in data:
        df = data[key]
        if df.wt_class.iloc[0] == "sig active":
            data_filt[key] = df

def find_peaks(df, peak_signal_cutoff, peak_length_cutoff):
    peak_status = []
    effect_sizes = list(df["mean.log2FC"])
    count = 0
    in_peak = False
    overall_count = 1
    for x in effect_sizes:
        if x <= -peak_signal_cutoff:
            count += 1
            if count >= peak_length_cutoff:
                if in_peak == False:
                    # replace the last peak_length_cutoff elements with "peak"
                    tmp = peak_status[:-peak_length_cutoff+1]
                    peak_status = list(tmp)
                    peak_status.extend(["peak"] * (peak_length_cutoff))
                    in_peak = True
                else:
                    peak_status.append("peak")
            else:
                peak_status.append("no peak")
        else:
            in_peak = False
            count = 0
            peak_status.append("no peak")
#         print("x: %s, count: %s, in_peak: %s, peak_status: %s" % (x, count, in_peak, peak_status))
#         print("count: %s, list length: %s" % (overall_count, len(peak_status)))
#         print("")
        overall_count += 1
#     print(len(peak_status))
#     print(len(df))
    df["peak"] = peak_status
    return df

hepg2_data_peaks = {}
k562_data_peaks = {}

for data_filt, data_peaks in zip([hepg2_data_filt, k562_data_filt], [hepg2_data_peaks, k562_data_peaks]):
    for key in data_filt:
        name = key.split(".")[0]
        strand = key.split(".")[2]
        gene_name = "%s__%s" % (name, strand)
        df = data_filt[key]
        df = find_peaks(df, peak_signal_cutoff, peak_length_cutoff)
        data_peaks[gene_name] = df

fimo["fixed_name"] = fimo.apply(fix_fimo_names, name_dict=NAME_DICT, loc_dict=LOC_DICT, axis=1)
fimo.head()

hepg2_data_peaks["GAS5__p1__tile2__minus"].head()

hepg2_motif_peaks = {}
k562_motif_peaks = {}

for data_peaks, data_motifs, cell in zip([hepg2_data_peaks, k562_data_peaks], [hepg2_motif_peaks, k562_motif_peaks],
                                         ["HepG2", "K562"]):
    print(cell)
    for key in data_peaks:
        print(key)
        df = data_peaks[key]
        fimo_sub = fimo[fimo["fixed_name"] == key]
        motif_positions = zip(list(fimo_sub["start"]), list(fimo_sub["stop"]), list(fimo_sub["motif"]))
        filtered_motifs = []
        filtered_starts = []
        filtered_ends = []
        for start, end, motif in motif_positions:
            for i in range(start, end):
                try:
                    peak_val = df[df["delpos"] == (i + del_buffer)]["peak"].iloc[0]
                except:
                    continue
                if peak_val == "peak":
                    filtered_motifs.append(motif)
                    filtered_starts.append(start)
                    filtered_ends.append(end)
                    break
        data_motifs[key] = {"motif": filtered_motifs, "start": filtered_starts, "end": filtered_ends}

hepg2_files = []
for (dirpath, dirnames, filenames) in walk("%s/files/1__motif_scores" % hepg2_out_dir):
    hepg2_files.extend(filenames)
    break
hepg2_files = [x for x in hepg2_files if "expr_filt" in x]

hepg2_data = {}
for f in hepg2_files:
    df = pd.read_table("%s/files/1__motif_scores/%s" % (hepg2_out_dir, f))
    name = f.split(".")[0]
    hepg2_data[name] = df
list(hepg2_data.keys())[0:5]

# first, put all gene data in dictionary of list of dataframes
hepg2_gene_data = {}
for peak in hepg2_data:
    peak_data = hepg2_data[peak]
    
    if "enhancer" not in peak:
        gene_name = peak.split("_")[0]
        prom_name = peak.split("_")[1]
        tile_name = peak.split("_")[2]
        strand_name = peak.split("_")[3]
    else:
        gene_name = peak.split("_")[0] + "_" + peak.split("_")[1]
        prom_name = peak.split("_")[2]
        tile_name = peak.split("_")[3]
        strand_name = peak.split("_")[4]
    peak_name = peak.split("__")[1]
    
    peak_data["gene_name"] = gene_name
    peak_data["prom_name"] = prom_name
    peak_data["tile_name"] = tile_name
    peak_data["strand_name"] = strand_name
    peak_data["peak_name"] = peak_name
    
    if "LINC" in gene_name:
        if "00467" not in gene_name:
            if "enhancer" in gene_name:
                gene_name = "enhancer_LINC-PINT"
            else:
                gene_name = "LINC-PINT"
    if gene_name not in hepg2_gene_data:
        hepg2_gene_data[gene_name] = [peak_data]
    else:
        current_gene_data = hepg2_gene_data[gene_name]
        current_gene_data.append(peak_data)

list(hepg2_gene_data.keys())[0:5]

hepg2_sig_data = {}
hepg2_all_motifs = []
for gene in hepg2_gene_data:
    print(gene)
    dfs = hepg2_gene_data[gene]
    gene_motifs = []
    for df in dfs:
        sig_motifs = df[df["padj"] < 0.05]
        gene_motifs.extend(list(sig_motifs["motif"]))
    gene_motifs = list(set(gene_motifs))
    hepg2_all_motifs.extend(gene_motifs)
    if len(gene_motifs) == 0:
        continue
    hepg2_sig_data[gene] = gene_motifs

hepg2_all_motifs = list(set(hepg2_all_motifs))
len(hepg2_all_motifs)

hepg2_motif_idx_dict = {k:v for k, v in zip(hepg2_all_motifs, list(range(0, len(hepg2_all_motifs))))}

hepg2_motif_array = np.zeros((len(hepg2_sig_data), len(hepg2_all_motifs)))
for i, gene in enumerate(hepg2_sig_data):
    motif_data = hepg2_sig_data[gene]
    motif_idxs = [hepg2_motif_idx_dict[motif] for motif in motif_data]
    #print(gene)
    for j in motif_idxs:
        hepg2_motif_array[i, j] = 1

hepg2_mo_df = pd.DataFrame(hepg2_motif_array, index=list(hepg2_sig_data.keys()), columns=hepg2_all_motifs)
hepg2_mo_df.head()

cmap = sns.light_palette("firebrick", reverse=False, as_cmap=True)

cg = sns.clustermap(hepg2_mo_df, annot=False, cmap=cmap, figsize=(2.5, 4))
cg.savefig("Fig_4D.pdf", bbox_inches="tight", dpi="figure")

k562_files = []
for (dirpath, dirnames, filenames) in walk("%s/files/1__motif_scores" % k562_out_dir):
    k562_files.extend(filenames)
    break
k562_files = [x for x in k562_files if "expr_filt" in x]

k562_data = {}
for f in k562_files:
    df = pd.read_table("%s/files/1__motif_scores/%s" % (k562_out_dir, f))
    name = f.split(".")[0]
    k562_data[name] = df

hepg2_peak_sig_data = {}
for tile in hepg2_data:
    df = hepg2_data[tile]
    fdr = df["fdr_cutoff"].iloc[0]
    sig_df = df[df["padj"] < fdr]
    sig_motifs = list(sig_df["motif"])
    hepg2_peak_sig_data[tile] = sig_motifs

k562_peak_sig_data = {}
for tile in k562_data:
    df = k562_data[tile]
    fdr = df["fdr_cutoff"].iloc[0]
    sig_df = df[df["padj"] < fdr]
    sig_motifs = list(sig_df["motif"])
    k562_peak_sig_data[tile] = sig_motifs

expr_in_hepg2_not_k562 = [x for x in hepg2_peak_sig_data.keys() if x not in k562_peak_sig_data.keys()]
expr_in_both = [x for x in hepg2_peak_sig_data.keys() if x in k562_peak_sig_data.keys()]

results_dict = {}
for gene in expr_in_hepg2_not_k562:
    sig_motifs = hepg2_peak_sig_data[gene]
    n_sig_motifs = len(sig_motifs)
    results_dict[gene] = (n_sig_motifs, "on in hepg2, not k562")
    
for gene in expr_in_both:
    hepg2_sig_motifs = hepg2_peak_sig_data[gene]
    k562_sig_motifs = k562_peak_sig_data[gene]
    all_motifs = hepg2_sig_motifs.extend(k562_sig_motifs)
    all_motifs = list(set(hepg2_sig_motifs))
    n_sig_motifs = len(all_motifs)
    results_dict[gene] = (n_sig_motifs, "on in both")

results_df = pd.DataFrame.from_dict(results_dict, orient="index").reset_index()
results_df.columns = ["gene", "n_sig_motifs", "type"]
results_df.head()

fig = plt.figure(figsize=(2.5, 2))
ax = sns.boxplot(data=results_df, x="type", y="n_sig_motifs", flierprops = dict(marker='o', markersize=5))
ax.set_xticklabels(["active in one cell type", "active in both cell types"], rotation=30)
mimic_r_boxplot(ax)
plt.xlabel("")
plt.ylabel("# of significant motifs")
plt.ylim((-0.1, 45))


# calc p-vals b/w dists
one_dist = np.asarray(results_df[results_df["type"] == "on in hepg2, not k562"]["n_sig_motifs"])
both_dist = np.asarray(results_df[results_df["type"] == "on in both"]["n_sig_motifs"])

one_dist = one_dist[~np.isnan(one_dist)]
both_dist = both_dist[~np.isnan(both_dist)]

u, pval = stats.mannwhitneyu(one_dist, both_dist, alternative="less", use_continuity=False)

# statistical annotation
annotate_pval(ax, 0.2, 0.8, 40, 0, 39, pval, fontsize)

fig.savefig("Fig_S15B.pdf", dpi="figure", bbox_inches="tight")

hepg2_del_info = pd.read_table(hepg2_del_info_file, sep="\t", header=None)
k562_del_info = pd.read_table(k562_del_info_file, sep="\t", header=None)
hepg2_del_info.columns = ["file", "name"]
k562_del_info.columns = ["file", "name"]
k562_del_info.head()

hepg2_del_info = {k:v for k,v in zip(list(hepg2_del_info["file"]), list(hepg2_del_info["name"]))}
k562_del_info = {k:v for k,v in zip(list(k562_del_info["file"]), list(k562_del_info["name"]))}

hepg2_dict = {}
k562_dict = {}
for file_map, data, d in zip([hepg2_del_info, k562_del_info], [hepg2_data, k562_data], [hepg2_dict, k562_dict]):
    for f in file_map:
        name = file_map[f]
        df = pd.read_table(f, sep="\t")
        wt_activ = df["wt_activ"].iloc[0]
        wt_class = df["wt_class"].iloc[0]
        
        # find num sig motifs
        n_tot_sig = 0
        peaks = [x for x in list(data.keys()) if name in x]
        for peak in peaks:
            m_df = data[peak]
            fdr = m_df["fdr_cutoff"].iloc[0]
            n_tot_sig += len(m_df[m_df["padj"] < fdr])
            
        d[name] = [wt_activ, wt_class, n_tot_sig]

hepg2_activ = pd.DataFrame.from_dict(hepg2_dict, orient="index").reset_index()
hepg2_activ.columns = ["seq_name", "activ", "class", "n_sig"]

k562_activ = pd.DataFrame.from_dict(k562_dict, orient="index").reset_index()
k562_activ.columns = ["seq_name", "activ", "class", "n_sig"]

g = sns.jointplot(data=hepg2_activ, x="activ", y="n_sig", kind="reg", space=0, size=2.2, stat_func=spearmanr, 
                  marginal_kws={"hist": True, "kde": False, "bins": 10}, color="darkgrey", scatter_kws={"s": 25},
                  xlim=(-1, 6), ylim=(-10, 60))
g.set_axis_labels("reference activity", "# motifs")
g.savefig("Fig_S15A_1.pdf", dpi="figure", bbox_inches="tight")

g = sns.jointplot(data=k562_activ, x="activ", y="n_sig", kind="reg", space=0, size=2.2, stat_func=spearmanr, 
                  marginal_kws={"hist": True, "kde": False, "bins": 10}, color="darkgrey", scatter_kws={"s": 25},
                  xlim=(-1, 6), ylim=(-10, 60))
g.set_axis_labels("reference activity", "# motifs")
g.savefig("Fig_S15A_2.pdf", dpi="figure", bbox_inches="tight")


